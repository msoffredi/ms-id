AWSTemplateFormatVersion: 2010-09-09
Description: Authentication serverless microservice
Transform:
    - AWS::Serverless-2016-10-31

Parameters:
    DeploymentPrefix:
        Type: String
        Description: Prefix to be used in multiple places to differentiate different unique deployments
        Default: dev
    SuperAdminEmail:
        Type: String
        Description: The email address of the default user to be added to the Cognito user pool by default

Globals:
    Function:
        Layers:
            - !Ref RuntimeDependenciesLayer
        Environment:
            Variables:
                SUPER_ADMIN_EMAIL: !Ref SuperAdminEmail
        Runtime: nodejs18.x
        MemorySize: 128
        Timeout: 100

Resources:
    MsIdEventsFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: makefile
        Properties:
            FunctionName: !Sub 'ms-id-events-${DeploymentPrefix}'
            Handler: dist/handlers/id-events.handler
            Description: Authentication serverless microservice events handler
            Environment:
                Variables:
                    USER_POOL_ID: !Ref MsIdCognitoUserPool
            Policies:
                - Statement:
                      - Effect: Allow
                        Resource: !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*'
                        Action:
                            - cognito-idp:AdminCreateUser
                            - cognito-idp:AdminDeleteUser
                            - cognito-idp:AdminGetUser

    # Shared layer with Lambda runtime dependencies
    RuntimeDependenciesLayer:
        Type: AWS::Serverless::LayerVersion
        Metadata:
            BuildMethod: makefile
        Properties:
            LayerName: !Sub 'ms-id-dependencies-${DeploymentPrefix}'
            Description: Runtime dependencies for Lambdas
            ContentUri: ./
            CompatibleRuntimes:
                - nodejs18.x
            RetentionPolicy: Retain

    MsIdCognitoUserPool:
        Type: AWS::Cognito::UserPool
        Properties:
            UserPoolName: !Sub 'MsId${DeploymentPrefix}'
            Policies:
                PasswordPolicy:
                    MinimumLength: 8
                    TemporaryPasswordValidityDays: 2
            UsernameAttributes:
                - email
            Schema:
                - AttributeDataType: String
                  Name: email
                  Required: true
                - AttributeDataType: String
                  Mutable: false
                  Name: userId
            AccountRecoverySetting:
                RecoveryMechanisms:
                    - Name: verified_email
                      Priority: 1
            AdminCreateUserConfig:
                AllowAdminCreateUserOnly: true
                InviteMessageTemplate:
                    EmailSubject: 'MS-Id: your temporary password'
                    EmailMessage: |
                        Thank you for registering!<br />
                        <br />
                        Your temporary password for the username {username} is: {####}<br />
                        <br />
                        You will be prompted to change your temporary password on your first login.<br />
                        Be aware this temporary password will be valid only for 48hs hours, so we<br />
                        encourage you to complete your registration process as soon as possible.<br />
                        <br />
                        You can complete the registration process by signing in at<br />
                        https://soffredi.org/auth/sign-in <br />
                        <br />

    MsIdCognitoUserPoolClient:
        Type: AWS::Cognito::UserPoolClient
        Properties:
            UserPoolId: !Ref MsIdCognitoUserPool
            ClientName: MsIdClient
            GenerateSecret: false
            # You can edit this in the future to match your desired callback URL
            SupportedIdentityProviders:
                - COGNITO
            ExplicitAuthFlows:
                - ALLOW_REFRESH_TOKEN_AUTH
                - ALLOW_USER_PASSWORD_AUTH

    MsIdInputUserDeletedEventRule:
        Type: AWS::Events::Rule
        Properties:
            Description: 'User deleted event for authentication service'
            EventBusName: !Sub 'ms-dev-${DeploymentPrefix}'
            EventPattern:
                source:
                    - 'user-service'
                detail:
                    type:
                        - 'user.deleted'
                    data:
                        id:
                            - exists: true
                        email:
                            - exists: true
            State: 'ENABLED'
            Targets:
                - Arn: !GetAtt MsIdEventsFunction.Arn
                  Id: 'id.input.user.deleted'

    PermissionForEventsToInvokeLambdaOnUserDeleted:
        Type: AWS::Lambda::Permission
        Properties:
            FunctionName:
                Ref: 'MsIdEventsFunction'
            Action: 'lambda:InvokeFunction'
            Principal: 'events.amazonaws.com'
            SourceArn: !GetAtt MsIdInputUserDeletedEventRule.Arn

    MsIdInputUserCreatedEventRule:
        Type: AWS::Events::Rule
        Properties:
            Description: 'User created event for authentication service'
            EventBusName: !Sub 'ms-dev-${DeploymentPrefix}'
            EventPattern:
                source:
                    - 'user-service'
                detail:
                    type:
                        - 'user.created'
                    data:
                        id:
                            - exists: true
                        email:
                            - exists: true
            State: 'ENABLED'
            Targets:
                - Arn: !GetAtt MsIdEventsFunction.Arn
                  Id: 'id.input.user.created'

    PermissionForEventsToInvokeLambdaOnUserCreated:
        Type: AWS::Lambda::Permission
        Properties:
            FunctionName:
                Ref: 'MsIdEventsFunction'
            Action: 'lambda:InvokeFunction'
            Principal: 'events.amazonaws.com'
            SourceArn: !GetAtt MsIdInputUserCreatedEventRule.Arn

    EventBus:
        Type: AWS::Events::EventBus
        Properties:
            Name: !Sub 'ms-dev-${DeploymentPrefix}'

Outputs:
    MsIdCognitoUserPool:
        Description: 'Cognito user pool arn'
        Value: !GetAtt MsIdCognitoUserPool.Arn
    MsIdCognitoUserPoolClientId:
        Description: 'Cognito user pool client id'
        Value: !Ref MsIdCognitoUserPoolClient
